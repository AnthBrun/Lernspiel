name: CMS CI/CD

on:
  push:
    branches: [ cms, master ]
    paths: 
      - 'cms/**'
      - 'docker-compose.yml'
      - '.github/workflows/cms.yml'
  pull_request:
    branches: [ cms, master ]
    paths: 
      - 'cms/**'
      - 'docker-compose.yml'

jobs:
  test:
    name: Test CMS
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: payload_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd cms
          pnpm install --frozen-lockfile

      - name: Run linting
        run: |
          cd cms
          pnpm run lint

      - name: Run type checking
        run: |
          cd cms
          pnpm run type-check

      - name: Build application
        run: |
          cd cms
          pnpm run build
        env:
          DATABASE_URI: postgresql://test_user:test_password@localhost:5432/payload_test
          PAYLOAD_SECRET: test-secret-key-for-ci

      - name: Run unit tests
        run: |
          cd cms
          pnpm run test --run
        env:
          DATABASE_URI: postgresql://test_user:test_password@localhost:5432/payload_test
          PAYLOAD_SECRET: test-secret-key-for-ci

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: payload_e2e
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd cms
          pnpm install --frozen-lockfile

      - name: Install Playwright
        run: |
          cd cms
          npx playwright install --with-deps

      - name: Build application
        run: |
          cd cms
          pnpm run build
        env:
          DATABASE_URI: postgresql://test_user:test_password@localhost:5432/payload_e2e
          PAYLOAD_SECRET: test-secret-key-for-e2e

      - name: Start application
        run: |
          cd cms
          pnpm run serve &
          sleep 15
        env:
          DATABASE_URI: postgresql://test_user:test_password@localhost:5432/payload_e2e
          PAYLOAD_SECRET: test-secret-key-for-e2e

      - name: Run Playwright tests
        run: |
          cd cms
          npx playwright test
        env:
          DATABASE_URI: postgresql://test_user:test_password@localhost:5432/payload_e2e
          PAYLOAD_SECRET: test-secret-key-for-e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-cms
          path: cms/playwright-report/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: payload_integration
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd cms
          pnpm install --frozen-lockfile

      - name: Run integration tests
        run: |
          cd cms
          pnpm run test:int
        env:
          DATABASE_URI: postgresql://test_user:test_password@localhost:5432/payload_integration
          PAYLOAD_SECRET: test-secret-key-for-integration

  build:
    name: Build CMS
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t cms:${{ github.sha }} -f cms/Dockerfile cms/

  deploy:
    name: Deploy CMS
    runs-on: ubuntu-latest
    needs: [test, build, integration-tests]
    if: github.ref == 'refs/heads/cms' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy CMS
        run: |
          echo "CMS deployment would happen here"
          # Example: Deploy to your CMS hosting environment
          # docker-compose -f docker-compose.prod.yml up -d cms

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Run security audit
        run: |
          cd cms
          pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=cms/package.json
        continue-on-error: true
