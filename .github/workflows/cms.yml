name: CMS CI/CD

on:
  push:
    branches: [ cms ]
    paths: 
      - 'cms/**'
      - '.github/workflows/cms.yml'
  pull_request:
    branches: [ cms ]
    paths: 
      - 'cms/**'

jobs:
  test:
    name: Test CMS
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: cms_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Ensure pnpm-lock.yaml exists
        run: |
          cd cms
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "No pnpm-lock.yaml found, generating one..."
            pnpm install --lockfile-only
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('cms/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          cd cms
          pnpm install --frozen-lockfile

      - name: Run linting
        run: |
          cd cms
          pnpm lint

      - name: Run type checking
        run: |
          cd cms
          pnpm type-check

      - name: Run tests
        run: |
          cd cms
          pnpm test
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/cms_test
          PAYLOAD_SECRET: test-secret-key

  build:
    name: Build CMS
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Ensure pnpm-lock.yaml exists
        run: |
          cd cms
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "No pnpm-lock.yaml found, generating one..."
            pnpm install --lockfile-only
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('cms/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          cd cms
          pnpm install --frozen-lockfile

      - name: Build application
        run: |
          cd cms
          pnpm build
        env:
          PAYLOAD_SECRET: test-secret-key

      - name: Build Docker image
        run: |
          docker build -t cms:${{ github.sha }} -f cms/Dockerfile cms/

  deploy:
    name: Deploy CMS
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/cms' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Deploy to staging
        run: |
          echo "CMS deployment would happen here"
          # Example: Deploy to your staging/production environment
          # docker-compose -f docker-compose.prod.yml up -d cms

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Ensure pnpm-lock.yaml exists
        run: |
          cd cms
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "No pnpm-lock.yaml found, generating one..."
            pnpm install --lockfile-only
          fi

      - name: Run security audit
        run: |
          cd cms
          pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=cms/package.json
        continue-on-error: true
