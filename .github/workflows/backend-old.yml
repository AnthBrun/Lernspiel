name: Backend CI/CD

on:
  push:
    branches: [ backend ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ backend ]
    paths: 
      - 'backend/**'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: serious_game_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run linting
        run: |
          cd backend
          npm run lint

      - name: Run tests
        run: |
          cd backend
          npm run test
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/serious_game_test

      - name: Run e2e tests
        run: |
          cd backend
          npm run test:e2e
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/serious_game_test

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Build application
        run: |
          cd backend
          npm run build

      - name: Build Docker image
        run: |
          docker build -t backend:${{ github.sha }} -f backend/Dockerfile backend/

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/backend' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Backend deployment would happen here"
          # Example: Deploy to your staging/production environment
          # docker-compose -f docker-compose.prod.yml up -d backend

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          cd backend
          npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json
        continue-on-error: true
