name: Full-Stack CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      cms: ${{ steps.changes.outputs.cms }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            cms:
              - 'cms/**'
            docker:
              - 'docker-compose.yml'
              - '**/Dockerfile'

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.docker == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: serious_game_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure package-lock.json exists
        run: |
          cd backend
          if [ ! -f "package-lock.json" ]; then
            echo "No package-lock.json found, generating one..."
            npm i --package-lock-only
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm run test
          npm run test:e2e
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/serious_game_test

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.docker == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure package-lock.json exists
        run: |
          cd frontend
          if [ ! -f "package-lock.json" ]; then
            echo "No package-lock.json found, generating one..."
            npm i --package-lock-only
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run lint
          npm run test --passWithNoTests
          npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3000

  test-cms:
    name: Test CMS
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.cms == 'true' || needs.changes.outputs.docker == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: payload_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Ensure pnpm-lock.yaml exists
        run: |
          cd cms
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "No pnpm-lock.yaml found, generating one..."
            pnpm install --lockfile-only
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('cms/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          cd cms
          pnpm install --frozen-lockfile

      - name: Run CMS tests
        run: |
          cd cms
          pnpm run lint
          pnpm run build
          pnpm run test --run
        env:
          DATABASE_URI: postgresql://test_user:test_password@localhost:5432/payload_test
          PAYLOAD_SECRET: test-secret-key-for-ci

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-cms]
    if: always() && (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') && (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') && (needs.test-cms.result == 'success' || needs.test-cms.result == 'skipped')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: serious_game
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all services
        run: |
          docker-compose -f docker-compose.yml build

      - name: Start all services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Run health checks
        run: |
          # Check if all services are running
          docker-compose -f docker-compose.yml ps
          
          # Test backend health
          curl -f http://localhost:3000/health || exit 1
          
          # Test frontend availability
          curl -f http://localhost:3001 || exit 1
          
          # Test CMS availability
          curl -f http://localhost:3002/admin || exit 1

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # Add your integration test commands

      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.yml down -v

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        run: |
          echo "Docker registry login would happen here"
          # echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and push backend
        run: |
          docker build -t backend:latest -f backend/Dockerfile backend/
          # docker tag backend:latest your-registry/backend:${{ github.sha }}
          # docker push your-registry/backend:${{ github.sha }}

      - name: Build and push frontend
        run: |
          docker build -t frontend:latest -f frontend/Dockerfile frontend/
          # docker tag frontend:latest your-registry/frontend:${{ github.sha }}
          # docker push your-registry/frontend:${{ github.sha }}

      - name: Build and push CMS
        run: |
          docker build -t cms:latest -f cms/Dockerfile cms/
          # docker tag cms:latest your-registry/cms:${{ github.sha }}
          # docker push your-registry/cms:${{ github.sha }}

  deploy:
    name: Deploy Full Stack
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to production
        run: |
          echo "Full-stack deployment would happen here"
          # Example: Deploy using docker-compose, Kubernetes, etc.
          # kubectl apply -f k8s/
          # or
          # docker-compose -f docker-compose.prod.yml up -d
